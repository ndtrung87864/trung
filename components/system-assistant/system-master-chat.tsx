"use client";

import { useState, useEffect, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import {
    MessageSquare,
    Send,
    Bot,
    User,
    ArrowLeft,
    Settings,
    Activity,
    Zap,
    Brain,
    Loader2,
    Copy,
    Check,
    Code,
    Monitor,
    Database,
    FileText,
    Cpu,
    Network,
    Shield,
    ChevronDown,
    Star,
    Clock,
    Sparkles,
    BarChart3,
    Users,
    TrendingUp,
    AlertTriangle,
    CheckCircle,
    RefreshCw,
    Terminal,
    Layers,
    GitBranch,
    HardDrive,
    MemoryStick,
    Wifi,
    Lock,
    Target,
    Award,
    TrendingDown,
    XCircle,
    PieChart,
    LineChart
} from "lucide-react";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import { cn } from "@/lib/utils";

interface SystemMessage {
    id: string;
    role: string;
    content: string;
    timestamp: string;
    metadata?: {
        type?: string;
        category?: string;
        priority?: 'low' | 'medium' | 'high' | 'critical';
        tags?: string[];
    };
}

interface SystemMasterChatProps {
    sessionId: string;
}

// Enhanced Code Block Component - Ti·∫øng Vi·ªát
const EnhancedCodeBlock = ({ language, children }: { language: string, children: string }) => {
    const [copied, setCopied] = useState(false);

    const copyCode = async () => {
        try {
            await navigator.clipboard.writeText(children);
            setCopied(true);
            toast.success("ƒê√£ sao ch√©p m√£!");
            setTimeout(() => setCopied(false), 2000);
        } catch {
            toast.error("Kh√¥ng th·ªÉ sao ch√©p");
        }
    };

    return (
        <div className="relative group my-3 w-full border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
            <div className="flex items-center justify-between bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 px-4 py-2 border-b">
                <div className="flex items-center gap-2">
                    <Code className="h-3 w-3 text-gray-500" />
                    <span className="text-xs font-medium text-gray-600 dark:text-gray-400 capitalize">
                        {language || 'm√£'}
                    </span>
                </div>
                <Button
                    variant="ghost"
                    size="sm"
                    className="h-6 w-6 p-0 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                    onClick={copyCode}
                >
                    {copied ? <Check className="h-3 w-3" /> : <Copy className="h-3 w-3" />}
                </Button>
            </div>
            <div className="bg-gray-950 text-gray-100 p-4 overflow-x-auto">
                <pre className="text-xs font-mono leading-relaxed">
                    <code>{children}</code>
                </pre>
            </div>
        </div>
    );
};

// C√°c component Markdown kh√°c gi·ªØ nguy√™n...
const MarkdownComponents = {
    code({ node, inline, className, children, ...props }: any) {
        const match = /language-(\w+)/.exec(className || '');
        const language = match ? match[1] : '';
        const codeString = String(children).replace(/\n$/, '');

        if (!inline && (language || codeString.includes('\n'))) {
            return <EnhancedCodeBlock language={language} children={codeString} />;
        }

        return (
            <code
                className="bg-blue-50 dark:bg-blue-950/50 text-blue-700 dark:text-blue-300 px-1.5 py-0.5 rounded-md text-sm font-mono border border-blue-200 dark:border-blue-800"
                {...props}
            >
                {children}
            </code>
        );
    },

    pre({ children }: any) {
        return <>{children}</>;
    },

    blockquote({ children }: any) {
        return (
            <blockquote className="border-l-4 border-blue-500 bg-gradient-to-r from-blue-50 to-blue-100/50 dark:from-blue-950/30 dark:to-blue-900/20 pl-4 py-2 my-3 rounded-r-lg">
                <div className="text-blue-800 dark:text-blue-200 text-sm">{children}</div>
            </blockquote>
        );
    },

    table({ children }: any) {
        return (
            <div className="overflow-x-auto my-4 border border-gray-200 dark:border-gray-700 rounded-lg">
                <table className="min-w-full text-sm">
                    {children}
                </table>
            </div>
        );
    },

    thead({ children }: any) {
        return <thead className="bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900">{children}</thead>;
    },

    tbody({ children }: any) {
        return <tbody className="divide-y divide-gray-200 dark:divide-gray-700">{children}</tbody>;
    },

    th({ children }: any) {
        return (
            <th className="px-4 py-2 text-left text-xs font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider">
                {children}
            </th>
        );
    },

    td({ children }: any) {
        return (
            <td className="px-4 py-2 text-sm text-gray-900 dark:text-gray-100">
                {children}
            </td>
        );
    },

    ul({ children }: any) {
        return <ul className="list-none my-2 space-y-1 text-sm">{children}</ul>;
    },

    ol({ children }: any) {
        return <ol className="list-decimal list-inside my-2 space-y-1 pl-4 text-sm">{children}</ol>;
    },

    li({ children }: any) {
        return (
            <li className="text-gray-700 dark:text-gray-300 text-sm flex items-start gap-2">
                <div className="h-1.5 w-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0" />
                <span>{children}</span>
            </li>
        );
    },

    h1({ children }: any) {
        return <h1 className="text-lg font-bold my-3 text-gray-900 dark:text-gray-100 border-b border-gray-200 dark:border-gray-700 pb-2">{children}</h1>;
    },

    h2({ children }: any) {
        return <h2 className="text-base font-semibold my-2 text-gray-900 dark:text-gray-100">{children}</h2>;
    },

    h3({ children }: any) {
        return <h3 className="text-sm font-medium my-2 text-gray-900 dark:text-gray-100">{children}</h3>;
    },

    p({ children }: any) {
        return <p className="my-2 leading-relaxed text-sm text-gray-700 dark:text-gray-300">{children}</p>;
    },

    a({ href, children }: any) {
        return (
            <a
                href={href}
                className="text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 underline decoration-blue-300 hover:decoration-blue-500 text-sm font-medium"
                target="_blank"
                rel="noopener noreferrer"
            >
                {children}
            </a>
        );
    },

    strong({ children }: any) {
        return <strong className="font-semibold text-gray-900 dark:text-gray-100">{children}</strong>;
    },

    em({ children }: any) {
        return <em className="italic text-gray-700 dark:text-gray-300">{children}</em>;
    }
};

export function SystemMasterChat({ sessionId }: SystemMasterChatProps) {
    const [messages, setMessages] = useState<SystemMessage[]>([]);
    const [inputMessage, setInputMessage] = useState("");
    const [loading, setLoading] = useState(false);
    const [initialLoading, setInitialLoading] = useState(true);
    const [copiedId, setCopiedId] = useState<string | null>(null);
    const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const router = useRouter();

    useEffect(() => {
        fetchMessages();
        const interval = loading ?
            setInterval(fetchMessages, 5000) :
            setInterval(fetchMessages, 30000);
        return () => clearInterval(interval);
    }, [sessionId, loading]);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const fetchMessages = async () => {
        try {
            const response = await fetch(`/api/system-master/chat/${sessionId}/messages`);
            if (response.ok) {
                const data = await response.json();
                setMessages(data);
            }
        } catch (error) {
            console.error('L·ªói t·∫£i tin nh·∫Øn:', error);
        } finally {
            setInitialLoading(false);
        }
    };

    // Fetch comprehensive data t·ª´ API m·ªõi
    const fetchComprehensiveData = async () => {
        try {
            const response = await fetch('/api/system-master/comprehensive-data');
            if (response.ok) {
                const data = await response.json();
                return data;
            }
        } catch (error) {
            console.error('L·ªói t·∫£i d·ªØ li·ªáu to√†n di·ªán:', error);
        }
        return null;
    };

    // Enhanced response generator v·ªõi ti·∫øng Vi·ªát
    const generateMockResponse = async (userInput: string): Promise<string> => {
        const input = userInput.toLowerCase();
        const comprehensiveData = await fetchComprehensiveData();

        if (!comprehensiveData) {
            return "‚ö†Ô∏è **Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu h·ªá th·ªëng**. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi h·ªá th·ªëng.";
        }

        // Extract data t·ª´ comprehensiveData
        const { models, servers, fields, users, systemHealth } = comprehensiveData;

        // 1. AI Models Analysis - Ti·∫øng Vi·ªát
        if (input.includes('model') || input.includes('m√¥ h√¨nh') || input.includes('ai')) {
            return `# üß† **Ph√¢n T√≠ch To√†n Di·ªán M√¥ H√¨nh AI**

## üìä **T·ªïng Quan H·ªá Th·ªëng**
- **T·ªïng M√¥ H√¨nh AI**: ${models.length}
- **T·ªïng ƒê√°nh Gi√°**: ${systemHealth.totalAssessments.toLocaleString()}
- **ƒêi·ªÉm Trung B√¨nh H·ªá Th·ªëng**: ${systemHealth.avgSystemScore.toFixed(2)}/10
- **T·ªïng H·ªôp Chat**: ${systemHealth.totalChatboxes.toLocaleString()}

## üèÜ **X·∫øp H·∫°ng Hi·ªáu Su·∫•t M√¥ H√¨nh**

${models.sort((a: any, b: any) => b.avgScore - a.avgScore).map((model: any, index: number) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const performance = model.avgScore >= 8 ? 'üü¢ Xu·∫•t s·∫Øc' : model.avgScore >= 6 ? 'üü° T·ªët' : model.avgScore >= 4 ? 'üü† Trung b√¨nh' : 'üî¥ K√©m';

                return `### ${medal} **${model.name}**
| Ch·ªâ S·ªë | Gi√° Tr·ªã | Chi Ti·∫øt |
|--------|--------|---------|
| **ƒêi·ªÉm Trung B√¨nh** | ${model.avgScore}/10 | ${performance} |
| **T·ªïng B√†i Thi** | ${model.totalExams} | Ho·∫°t ƒë·ªông ƒë√°nh gi√° |
| **T·ªïng B√†i T·∫≠p** | ${model.totalExercises} | Ho·∫°t ƒë·ªông luy·ªán t·∫≠p |
| **T·ªïng K·∫øt Qu·∫£** | ${model.totalResults.toLocaleString()} | B√†i n·ªôp c·ªßa h·ªçc sinh |
| **S·ª≠ D·ª•ng Chatbox** | ${model.totalChatboxes} | Cu·ªôc tr√≤ chuy·ªán AI |
| **Ph√¢n Ph·ªëi ƒêi·ªÉm** | Xu·∫•t s·∫Øc: ${model.scoreDistribution.excellent}, T·ªët: ${model.scoreDistribution.good}, Trung b√¨nh: ${model.scoreDistribution.average}, K√©m: ${model.scoreDistribution.poor} | Ph√¢n t√≠ch hi·ªáu su·∫•t |

**S·ª≠ D·ª•ng M√°y Ch·ªß:**
${Object.entries(model.serverUsage).map(([server, data]: [string, any]) =>
                    `- **${server}**: ${data.exams} b√†i thi, ${data.exercises} b√†i t·∫≠p, ${data.totalResults} k·∫øt qu·∫£`
                ).join('\n')}

**Hi·ªáu Su·∫•t**: ${model.performance} | **T·∫°o**: ${new Date(model.createdAt).toLocaleDateString('vi-VN')}

---`;
            }).join('\n')}

## üìà **Ph√¢n Ph·ªëi S·ª≠ D·ª•ng M√¥ H√¨nh**
${Object.entries(systemHealth.modelDistribution).map(([modelName, count]) =>
                `- **${modelName}**: ${count} t·ªïng k·∫øt qu·∫£`
            ).join('\n')}

## üéØ **Khuy·∫øn Ngh·ªã**
1. **Ng∆∞·ªùi D·∫´n ƒê·∫ßu**: T·∫≠p trung v√†o vi·ªác sao ch√©p c√°c m·∫´u th√†nh c√¥ng c·ªßa ${models[0]?.name}
2. **C·∫ßn C·∫£i Thi·ªán**: C√°c m√¥ h√¨nh c√≥ ƒëi·ªÉm trung b√¨nh < 6.0 c·∫ßn t·ªëi ∆∞u h√≥a
3. **T·ªëi ∆Øu S·ª≠ D·ª•ng**: C√¢n b·∫±ng t·∫£i tr√™n c√°c m√¥ h√¨nh hi·ªáu su·∫•t cao
4. **Ph√¢n Ph·ªëi ƒêi·ªÉm**: Gi·∫£i quy·∫øt c√°c m√¥ h√¨nh c√≥ ƒëi·ªÉm "K√©m" cao`;
        }

        // 2. Server Analysis - Ti·∫øng Vi·ªát
        if (input.includes('server') || input.includes('m√°y ch·ªß') || input.includes('server performance')) {
            return `# üñ•Ô∏è **Ph√¢n T√≠ch Hi·ªáu Su·∫•t M√°y Ch·ªß**

## üìä **T·ªïng Quan M√°y Ch·ªß**
- **T·ªïng M√°y Ch·ªß**: ${servers.length}
- **T·ªïng Th√†nh Vi√™n**: ${servers.reduce((sum: number, s: any) => sum + s.memberCount, 0).toLocaleString()}
- **T·ªïng K√™nh**: ${servers.reduce((sum: number, s: any) => sum + s.channelCount, 0)}
- **Ho·∫°t ƒê·ªông Nh·∫•t**: ${systemHealth.serverActivity[0]?.name || 'Kh√¥ng c√≥'}

## üèÜ **X·∫øp H·∫°ng Hi·ªáu Su·∫•t M√°y Ch·ªß**

${servers.sort((a: any, b: any) => b.avgScore - a.avgScore).map((server: any, index: number) => {
                const rank = index + 1;
                const performance = server.avgScore >= 8 ? 'üü¢ Xu·∫•t s·∫Øc' : server.avgScore >= 6 ? 'üü° T·ªët' : server.avgScore >= 4 ? 'üü† Trung b√¨nh' : 'üî¥ K√©m';

                return `### ${rank}. **${server.name}**
| Ch·ªâ S·ªë | Gi√° Tr·ªã | Tr·∫°ng Th√°i |
|--------|--------|------------|
| **ƒêi·ªÉm Trung B√¨nh** | ${server.avgScore}/10 | ${performance} |
| **Th√†nh Vi√™n** | ${server.memberCount.toLocaleString()} | ${server.activity.activeMembers} ho·∫°t ƒë·ªông (7 ng√†y) |
| **K√™nh** | ${server.channelCount} | Ph√¢n ph·ªëi n·ªôi dung |
| **T·ªïng B√†i Thi** | ${server.totalExams} | Kh·ªëi l∆∞·ª£ng ƒë√°nh gi√° |
| **T·ªïng B√†i T·∫≠p** | ${server.totalExercises} | Kh·ªëi l∆∞·ª£ng luy·ªán t·∫≠p |
| **T·ªïng K·∫øt Qu·∫£** | ${server.totalResults.toLocaleString()} | B√†i n·ªôp h·ªçc sinh |
| **Ho·∫°t ƒê·ªông G·∫ßn ƒê√¢y** | ${server.activity.recentResults} k·∫øt qu·∫£ (7 ng√†y) | M·ª©c ƒë·ªô ho·∫°t ƒë·ªông |

**S·ª≠ D·ª•ng M√¥ H√¨nh AI:**
${Object.entries(server.modelUsage).map(([model, data]: [string, any]) =>
                    `- **${model}**: ${data.count} ho·∫°t ƒë·ªông, ${data.results} k·∫øt qu·∫£`
                ).join('\n')}

**T·∫°o**: ${new Date(server.createdAt).toLocaleDateString('vi-VN')}

---`;
            }).join('\n')}

## üìà **Th√¥ng Tin Ho·∫°t ƒê·ªông M√°y Ch·ªß**
- **Ho·∫°t ƒê·ªông Nh·∫•t**: ${systemHealth.serverActivity[0]?.name} (${systemHealth.serverActivity[0]?.totalResults} k·∫øt qu·∫£)
- **ƒêi·ªÉm Cao Nh·∫•t**: ${servers.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.name} (${servers.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.avgScore}/10)
- **C·ªông ƒê·ªìng L·ªõn Nh·∫•t**: ${servers.sort((a: any, b: any) => b.memberCount - a.memberCount)[0]?.name} (${servers.sort((a: any, b: any) => b.memberCount - a.memberCount)[0]?.memberCount} th√†nh vi√™n)`;
        }

        // 3. Field/Subject Analysis - Ti·∫øng Vi·ªát
        if (input.includes('field') || input.includes('lƒ©nh v·ª±c') || input.includes('m√¥n h·ªçc') || input.includes('ch∆∞∆°ng tr√¨nh')) {
            return `# üìö **Ph√¢n T√≠ch Lƒ©nh V·ª±c/M√¥n H·ªçc**

## üìä **T·ªïng Quan Ch∆∞∆°ng Tr√¨nh**
- **T·ªïng Lƒ©nh V·ª±c**: ${fields.length}
- **Ph·ªï Bi·∫øn Nh·∫•t**: ${fields.sort((a: any, b: any) => b.popularityScore - a.popularityScore)[0]?.name}
- **ƒêi·ªÉm Cao Nh·∫•t**: ${fields.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.name}
- **Th√°ch Th·ª©c Nh·∫•t**: ${fields.sort((a: any, b: any) => a.avgScore - b.avgScore)[0]?.name}

## üéØ **Ph√¢n T√≠ch Hi·ªáu Su·∫•t Lƒ©nh V·ª±c**

${fields.sort((a: any, b: any) => b.popularityScore - a.popularityScore).map((field: any, index: number) => {
                const rank = index + 1;
                const difficulty = field.avgScore >= 7 ? 'üü¢ D·ªÖ' : field.avgScore >= 5 ? 'üü° Trung b√¨nh' : field.avgScore >= 3 ? 'üü† Kh√≥' : 'üî¥ R·∫•t kh√≥';

                return `### ${rank}. **${field.name}**
${field.description ? `*${field.description}*` : ''}

| Ch·ªâ S·ªë | Gi√° Tr·ªã | Ph√¢n T√≠ch |
|--------|--------|-----------|
| **ƒêi·ªÉm Trung B√¨nh** | ${field.avgScore}/10 | ${difficulty} |
| **K√™nh** | ${field.channelCount} | Ph√¢n ph·ªëi n·ªôi dung |
| **T·ªïng B√†i Thi** | ${field.totalExams} | Kh·ªëi l∆∞·ª£ng ƒë√°nh gi√° |
| **T·ªïng B√†i T·∫≠p** | ${field.totalExercises} | Ho·∫°t ƒë·ªông luy·ªán t·∫≠p |
| **T·ªïng K·∫øt Qu·∫£** | ${field.totalResults.toLocaleString()} | S·ª± tham gia c·ªßa h·ªçc sinh |
| **S·ª≠ D·ª•ng Chatbox** | ${field.totalChatboxes} | Y√™u c·∫ßu h·ªó tr·ª£ AI |
| **ƒêi·ªÉm Ph·ªï Bi·∫øn** | ${field.popularityScore} | S·ª± tham gia t·ªïng th·ªÉ |
| **M·ª©c ƒê·ªô Kh√≥** | ${field.difficulty} | D·ª±a tr√™n hi·ªáu su·∫•t h·ªçc sinh |

---`;
            }).join('\n')}

## üìä **Hi·ªÉu Bi·∫øt Ch∆∞∆°ng Tr√¨nh**
- **M√¥n D·ªÖ Nh·∫•t**: ${fields.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.name} (${fields.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.avgScore}/10)
- **Th√°ch Th·ª©c Nh·∫•t**: ${fields.sort((a: any, b: any) => a.avgScore - b.avgScore)[0]?.name} (${fields.sort((a: any, b: any) => a.avgScore - b.avgScore)[0]?.avgScore}/10)
- **H·∫•p D·∫´n Nh·∫•t**: ${fields.sort((a: any, b: any) => b.popularityScore - a.popularityScore)[0]?.name} (${fields.sort((a: any, b: any) => b.popularityScore - a.popularityScore)[0]?.popularityScore} ƒëi·ªÉm tham gia)

## üéØ **Khuy·∫øn Ngh·ªã Gi√°o D·ª•c**
1. **Lƒ©nh V·ª±c Tr·ªçng T√¢m**: C√°c m√¥n c√≥ ƒëi·ªÉm trung b√¨nh < 5.0 c·∫ßn xem x√©t ch∆∞∆°ng tr√¨nh
2. **M√¥ H√¨nh Th√†nh C√¥ng**: Sao ch√©p ph∆∞∆°ng ph√°p c·ªßa c√°c m√¥n c√≥ ƒëi·ªÉm cao
3. **S·ª± Tham Gia**: TƒÉng h·ªó tr·ª£ chatbox cho c√°c m√¥n kh√≥
4. **C√¢n B·∫±ng N·ªôi Dung**: ƒê·∫£m b·∫£o t·ª∑ l·ªá b√†i thi/b√†i t·∫≠p ph√π h·ª£p cho t·∫•t c·∫£ lƒ©nh v·ª±c`;
        }

        // 4. User Analytics - Ti·∫øng Vi·ªát
        if (input.includes('user') || input.includes('ng∆∞·ªùi d√πng') || input.includes('h·ªçc sinh') || input.includes('analytics')) {
            const { performanceTrends, examResults, exerciseResults } = comprehensiveData;

            // Calculate user performance trends
            const userPerformance: Record<string, any> = {};
            [...examResults, ...exerciseResults].forEach((result: any) => {
                if (result.userName) {
                    if (!userPerformance[result.userName]) {
                        userPerformance[result.userName] = { scores: [], count: 0, avgScore: 0 };
                    }
                    userPerformance[result.userName].scores.push(result.score);
                    userPerformance[result.userName].count++;
                }
            });

            Object.keys(userPerformance).forEach(userName => {
                const data = userPerformance[userName];
                data.avgScore = data.scores.reduce((a: number, b: number) => a + b, 0) / data.scores.length;
            });

            const topPerformers = Object.entries(userPerformance)
                .sort(([, a], [, b]) => (b as any).avgScore - (a as any).avgScore)
                .slice(0, 10);

            return `# üë• **Ph√¢n T√≠ch Ng∆∞·ªùi D√πng & S·ª± Tham Gia**

## üìä **T·ªïng Quan C∆° S·ªü Ng∆∞·ªùi D√πng**
- **T·ªïng Ng∆∞·ªùi D√πng**: ${users.totalUsers.toLocaleString()}
- **Ng∆∞·ªùi D√πng Ho·∫°t ƒê·ªông (7 ng√†y)**: ${users.activeUsers.toLocaleString()}
- **Ng∆∞·ªùi D√πng M·ªõi (30 ng√†y)**: ${users.newUsers.toLocaleString()}
- **T·ª∑ L·ªá Ho·∫°t ƒê·ªông**: ${((users.activeUsers / users.totalUsers) * 100).toFixed(1)}%

## üëë **Ph√¢n Ph·ªëi Ng∆∞·ªùi D√πng**
- **Qu·∫£n Tr·ªã Vi√™n**: ${users.usersByRole.ADMIN}
- **Ng∆∞·ªùi D√πng Th∆∞·ªùng**: ${users.usersByRole.USER}
- **Ch·ªß M√°y Ch·ªß**: ${users.serverOwners}
- **Trung B√¨nh M√°y Ch·ªß/Ng∆∞·ªùi D√πng**: ${users.avgServersPerUser.toFixed(1)}

## üèÜ **H·ªçc Sinh Xu·∫•t S·∫Øc Nh·∫•t**

${topPerformers.map(([userName, data], index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                const performance = (data as any).avgScore >= 8 ? 'üü¢ Xu·∫•t s·∫Øc' : (data as any).avgScore >= 6 ? 'üü° T·ªët' : (data as any).avgScore >= 4 ? 'üü† Trung b√¨nh' : 'üî¥ K√©m';

                return `### ${medal} **${userName}**
- **ƒêi·ªÉm Trung B√¨nh**: ${(data as any).avgScore.toFixed(2)}/10 ${performance}
- **T·ªïng B√†i N·ªôp**: ${(data as any).count}
- **Kho·∫£ng ƒêi·ªÉm**: ${Math.min(...(data as any).scores).toFixed(1)} - ${Math.max(...(data as any).scores).toFixed(1)}`;
            }).join('\n\n')}

## üìà **Xu H∆∞·ªõng Hi·ªáu Su·∫•t**

### Ho·∫°t ƒê·ªông H√†ng Ng√†y:
${Object.entries(performanceTrends.daily).slice(-7).map(([date, data]) =>
                `- **${new Date(date).toLocaleDateString('vi-VN')}**: ${(data as any).count} b√†i n·ªôp, ƒëi·ªÉm trung b√¨nh ${(data as any).avgScore.toFixed(2)}/10`
            ).join('\n')}

## üéØ **Hi·ªÉu Bi·∫øt S·ª± Tham Gia**
- **Ng√†y Ho·∫°t ƒê·ªông Nh·∫•t**: ${Object.entries(performanceTrends.daily).sort(([, a], [, b]) => (b as any).count - (a as any).count)[0]?.[0]}
- **Ng√†y Hi·ªáu Su·∫•t T·ªët Nh·∫•t**: ${Object.entries(performanceTrends.daily).sort(([, a], [, b]) => (b as any).avgScore - (a as any).avgScore)[0]?.[0]}
- **T·ª∑ L·ªá Gi·ªØ Ch√¢n**: ${((users.activeUsers / users.totalUsers) * 100).toFixed(1)}% gi·ªØ ch√¢n h√†ng tu·∫ßn
- **T·ª∑ L·ªá TƒÉng Tr∆∞·ªüng**: ${users.newUsers > 0 ? '+' : ''}${users.newUsers} ng∆∞·ªùi d√πng m·ªõi trong k·ª≥ n√†y

## üí° **Khuy·∫øn Ngh·ªã Tr·∫£i Nghi·ªám Ng∆∞·ªùi D√πng**
1. **S·ª± Tham Gia**: T·∫≠p trung k√≠ch ho·∫°t ${users.totalUsers - users.activeUsers} ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông
2. **Hi·ªáu Su·∫•t**: H·ªó tr·ª£ h·ªçc sinh c√≥ ƒëi·ªÉm trung b√¨nh < 6.0
3. **Gi·ªØ Ch√¢n**: Th·ª±c hi·ªán chi·∫øn l∆∞·ª£c cho ${users.usersByRole.USER} ng∆∞·ªùi d√πng th∆∞·ªùng
4. **TƒÉng Tr∆∞·ªüng**: Xu h∆∞·ªõng tƒÉng tr∆∞·ªüng hi·ªán t·∫°i cho th·∫•y ${users.newUsers > 0 ? 't√≠ch c·ª±c' : 'c·∫ßn ch√∫ √Ω'} v·ªÅ thu h√∫t ng∆∞·ªùi d√πng`;
        }

        // 5. System Health & Performance - Ti·∫øng Vi·ªát
        if (input.includes('system') || input.includes('h·ªá th·ªëng') || input.includes('health') || input.includes('s·ª©c kh·ªèe') || input.includes('overview')) {
            return `# üñ•Ô∏è **B·∫£ng ƒêi·ªÅu Khi·ªÉn S·ª©c Kh·ªèe & Hi·ªáu Su·∫•t H·ªá Th·ªëng**

## üöÄ **Tr·∫°ng Th√°i H·ªá Th·ªëng: ${systemHealth.avgSystemScore >= 7 ? 'üü¢ XU·∫§T S·∫ÆC' : systemHealth.avgSystemScore >= 5 ? 'üü° T·ªêT' : 'üî¥ C·∫¶N CH√ö √ù'}**

### üìä **Ch·ªâ S·ªë C·ªët L√µi**
- **ƒêi·ªÉm T·ªïng Th·ªÉ H·ªá Th·ªëng**: ${systemHealth.avgSystemScore.toFixed(2)}/10
- **T·ªïng ƒê√°nh Gi√°**: ${systemHealth.totalAssessments.toLocaleString()}
- **Cu·ªôc Tr√≤ Chuy·ªán AI**: ${systemHealth.totalChatboxes.toLocaleString()}
- **Ng∆∞·ªùi D√πng Ho·∫°t ƒê·ªông**: ${users.activeUsers.toLocaleString()} / ${users.totalUsers.toLocaleString()} (${((users.activeUsers / users.totalUsers) * 100).toFixed(1)}%)

### üß† **C∆° S·ªü H·∫° T·∫ßng AI**
- **M√¥ H√¨nh AI**: ${models.length} m√¥ h√¨nh ho·∫°t ƒë·ªông
- **M√¥ H√¨nh Hi·ªáu Su·∫•t T·ªët Nh·∫•t**: ${models.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.name} (${models.sort((a: any, b: any) => b.avgScore - a.avgScore)[0]?.avgScore}/10)
- **M√¥ H√¨nh ƒê∆∞·ª£c S·ª≠ D·ª•ng Nhi·ªÅu Nh·∫•t**: ${Object.entries(systemHealth.modelDistribution).sort(([, a], [, b]) => (b as number) - (a as number))[0]?.[0]} (${Object.entries(systemHealth.modelDistribution).sort(([, a], [, b]) => (b as number) - (a as number))[0]?.[1]} l·∫ßn s·ª≠ d·ª•ng)

### üñ•Ô∏è **C∆° S·ªü H·∫° T·∫ßng M√°y Ch·ªß**
- **T·ªïng M√°y Ch·ªß**: ${servers.length}
- **T·ªïng K√™nh**: ${servers.reduce((sum: number, s: any) => sum + s.channelCount, 0)}
- **M√°y Ch·ªß Ho·∫°t ƒê·ªông Nh·∫•t**: ${systemHealth.serverActivity[0]?.name} (${systemHealth.serverActivity[0]?.totalResults} k·∫øt qu·∫£)
- **Quy M√¥ C·ªông ƒê·ªìng**: ${servers.reduce((sum: number, s: any) => sum + s.memberCount, 0).toLocaleString()} t·ªïng th√†nh vi√™n

### üìö **Hi·ªáu Su·∫•t N·ªôi Dung**
- **Lƒ©nh V·ª±c H√†ng ƒê·∫ßu**: ${systemHealth.topFields.slice(0, 3).map((f: any) => f.name).join(', ')}
- **S·ª≠ D·ª•ng N·ªôi Dung**: ${systemHealth.totalAssessments > 1000 ? 'üü¢ Cao' : systemHealth.totalAssessments > 500 ? 'üü° Trung b√¨nh' : 'üî¥ Th·∫•p'}
- **S·ª≠ D·ª•ng H·ªó Tr·ª£ AI**: ${systemHealth.totalChatboxes > 100 ? 'üü¢ Ho·∫°t ƒë·ªông' : 'üü° V·ª´a ph·∫£i'}

### ‚ö° **Ch·ªâ S·ªë Hi·ªáu Su·∫•t**

| Th√†nh Ph·∫ßn | Tr·∫°ng Th√°i | ƒêi·ªÉm | Xu H∆∞·ªõng |
|------------|------------|------|----------|
| **M√¥ H√¨nh AI** | ${models.filter((m: any) => m.avgScore >= 7).length}/${models.length} ho·∫°t ƒë·ªông t·ªët | ${(models.reduce((sum: number, m: any) => sum + m.avgScore, 0) / models.length).toFixed(1)}/10 | ${models.filter((m: any) => m.avgScore >= 7).length > models.length / 2 ? 'üìà T√≠ch c·ª±c' : 'üìâ C·∫ßn ch√∫ √Ω'} |
| **M·∫°ng M√°y Ch·ªß** | ${servers.filter((s: any) => s.avgScore >= 6).length}/${servers.length} m√°y ch·ªß kh·ªèe m·∫°nh | ${(servers.reduce((sum: number, s: any) => sum + s.avgScore, 0) / servers.length).toFixed(1)}/10 | ${servers.filter((s: any) => s.activity.recentResults > 0).length > servers.length / 2 ? 'üìà Ho·∫°t ƒë·ªông' : 'üìä ·ªîn ƒë·ªãnh'} |
| **S·ª± Tham Gia Ng∆∞·ªùi D√πng** | ${((users.activeUsers / users.totalUsers) * 100).toFixed(1)}% t·ª∑ l·ªá ho·∫°t ƒë·ªông | ${(users.activeUsers / users.totalUsers * 10).toFixed(1)}/10 | ${users.newUsers > 0 ? 'üìà TƒÉng tr∆∞·ªüng' : 'üìä ·ªîn ƒë·ªãnh'} |
| **Ch·∫•t L∆∞·ª£ng N·ªôi Dung** | ƒêi·ªÉm trung b√¨nh ${systemHealth.avgSystemScore.toFixed(1)}/10 | ${systemHealth.avgSystemScore.toFixed(1)}/10 | ${systemHealth.avgSystemScore >= 6 ? 'üìà T·ªët' : '‚ö†Ô∏è C·∫ßn xem x√©t'} |

### üîß **Danh S√°ch Ki·ªÉm Tra S·ª©c Kh·ªèe H·ªá Th·ªëng**

#### ‚úÖ **Th√†nh Ph·∫ßn Kh·ªèe M·∫°nh**
${[
                    systemHealth.avgSystemScore >= 6 ? '- Hi·ªáu su·∫•t t·ªïng th·ªÉ h·ªá th·ªëng t·ªët' : null,
                    models.filter((m: any) => m.avgScore >= 7).length > 0 ? `- ${models.filter((m: any) => m.avgScore >= 7).length} m√¥ h√¨nh AI ho·∫°t ƒë·ªông xu·∫•t s·∫Øc` : null,
                    users.activeUsers > users.totalUsers * 0.3 ? '- M·ª©c ƒë·ªô tham gia ng∆∞·ªùi d√πng t·ªët' : null,
                    systemHealth.totalAssessments > 100 ? '- Ho·∫°t ƒë·ªông ƒë√°nh gi√° kh·ªèe m·∫°nh' : null
                ].filter(Boolean).join('\n')}

#### ‚ö†Ô∏è **Lƒ©nh V·ª±c C·∫ßn Ch√∫ √ù**
${[
                    systemHealth.avgSystemScore < 6 ? '- Hi·ªáu su·∫•t t·ªïng th·ªÉ h·ªá th·ªëng c·∫ßn c·∫£i thi·ªán' : null,
                    models.filter((m: any) => m.avgScore < 5).length > 0 ? `- ${models.filter((m: any) => m.avgScore < 5).length} m√¥ h√¨nh AI ho·∫°t ƒë·ªông k√©m` : null,
                    users.activeUsers < users.totalUsers * 0.3 ? '- T·ª∑ l·ªá tham gia ng∆∞·ªùi d√πng th·∫•p' : null,
                    systemHealth.totalAssessments < 100 ? '- Ho·∫°t ƒë·ªông ƒë√°nh gi√° th·∫•p' : null
                ].filter(Boolean).join('\n') || '- Kh√¥ng ph√°t hi·ªán v·∫•n ƒë·ªÅ nghi√™m tr·ªçng'}

### üéØ **Khuy·∫øn Ngh·ªã T·ªëi ∆Øu H√≥a**

1. **Hi·ªáu Su·∫•t AI**: ${models.filter((m: any) => m.avgScore < 6).length > 0 ? `T·ªëi ∆∞u h√≥a ${models.filter((m: any) => m.avgScore < 6).length} m√¥ h√¨nh ho·∫°t ƒë·ªông k√©m` : 'Duy tr√¨ m·ª©c hi·ªáu su·∫•t AI hi·ªán t·∫°i'}

2. **S·ª± Tham Gia Ng∆∞·ªùi D√πng**: ${users.activeUsers < users.totalUsers * 0.5 ? 'Th·ª±c hi·ªán chi·∫øn l∆∞·ª£c gi·ªØ ch√¢n ng∆∞·ªùi d√πng' : 'Ti·∫øp t·ª•c chi·∫øn l∆∞·ª£c tham gia hi·ªán t·∫°i'}

3. **Chi·∫øn L∆∞·ª£c N·ªôi Dung**: ${systemHealth.avgSystemScore < 6 ? 'Xem x√©t v√† c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng n·ªôi dung' : 'Duy tr√¨ ti√™u chu·∫©n n·ªôi dung cao'}

4. **C∆° S·ªü H·∫° T·∫ßng**: ${servers.filter((s: any) => s.activity.recentResults === 0).length > 0 ? `K√≠ch ho·∫°t ${servers.filter((s: any) => s.activity.recentResults === 0).length} m√°y ch·ªß kh√¥ng ho·∫°t ƒë·ªông` : 'C∆° s·ªü h·∫° t·∫ßng m√°y ch·ªß ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ªët'}

### üìà **T√≥m T·∫Øt Ch·ªâ S·ªë Hi·ªáu Su·∫•t**

\`\`\`json
{
  "suc_khoe_tong_the": "${systemHealth.avgSystemScore >= 7 ? 'xuat_sac' : systemHealth.avgSystemScore >= 5 ? 'tot' : 'can_cai_thien'}",
  "diem_he_thong": ${systemHealth.avgSystemScore.toFixed(2)},
  "thanh_phan_hoat_dong": {
    "mo_hinh_ai": ${models.length},
    "may_chu": ${servers.length},
    "nguoi_dung_hoat_dong": ${users.activeUsers},
    "tong_danh_gia": ${systemHealth.totalAssessments}
  },
  "chi_so_hieu_suat": {
    "hieu_qua_ai": "${(models.reduce((sum: number, m: any) => sum + m.avgScore, 0) / models.length).toFixed(1)}/10",
    "su_tham_gia_nguoi_dung": "${((users.activeUsers / users.totalUsers) * 100).toFixed(1)}%",
    "chat_luong_noi_dung": "${systemHealth.avgSystemScore.toFixed(1)}/10"
  }
}
\`\`\`

*C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${new Date().toLocaleString('vi-VN')}*`;
        }

        // Default comprehensive overview - Ti·∫øng Vi·ªát
        return `# ü§ñ **Tr·ª£ L√Ω AI Qu·∫£n L√Ω H·ªá Th·ªëng - Ph√¢n T√≠ch To√†n Di·ªán C√≥ S·∫µn**

## üìä **D·ªØ Li·ªáu C√≥ S·∫µn ƒê·ªÉ Ph√¢n T√≠ch**
- **${models?.length || 0} M√¥ H√¨nh AI** v·ªõi ch·ªâ s·ªë hi·ªáu su·∫•t
- **${servers?.length || 0} M√°y Ch·ªß** v·ªõi d·ªØ li·ªáu ho·∫°t ƒë·ªông
- **${fields?.length || 0} Lƒ©nh V·ª±c Ch·ªß ƒê·ªÅ** v·ªõi hi·ªÉu bi·∫øt ch∆∞∆°ng tr√¨nh
- **${users?.totalUsers || 0} Ng∆∞·ªùi D√πng** v·ªõi ph√¢n t√≠ch t∆∞∆°ng t√°c
- **${systemHealth?.totalAssessments || 0} ƒê√°nh Gi√°** v·ªõi d·ªØ li·ªáu ƒëi·ªÉm

## üéØ **Nh·ªØng g√¨ t√¥i c√≥ th·ªÉ ph√¢n t√≠ch cho b·∫°n:**

### üß† **Ph√¢n T√≠ch AI & M√¥ H√¨nh**
- So s√°nh hi·ªáu su·∫•t m√¥ h√¨nh AI
- M·∫´u s·ª≠ d·ª•ng v√† hi·ªáu qu·∫£
- Ph√¢n ph·ªëi v√† xu h∆∞·ªõng ƒëi·ªÉm

### üñ•Ô∏è **Ph√¢n T√≠ch C∆° S·ªü H·∫° T·∫ßng**
- Ch·ªâ s·ªë hi·ªáu su·∫•t m√°y ch·ªß
- T·ª∑ l·ªá s·ª≠ d·ª•ng k√™nh
- M·ª©c ƒë·ªô t∆∞∆°ng t√°c c·ªông ƒë·ªìng

### üìö **Ph√¢n T√≠ch Gi√°o D·ª•c**
- Ph√¢n t√≠ch ƒë·ªô kh√≥ m√¥n h·ªçc/lƒ©nh v·ª±c
- Hi·ªáu qu·∫£ ch∆∞∆°ng tr√¨nh
- Xu h∆∞·ªõng k·∫øt qu·∫£ h·ªçc t·∫≠p

### üë• **Ph√¢n T√≠ch Ng∆∞·ªùi D√πng & T∆∞∆°ng T√°c**
- Theo d√µi hi·ªáu su·∫•t h·ªçc sinh
- M·∫´u ho·∫°t ƒë·ªông ng∆∞·ªùi d√πng
- Ch·ªâ s·ªë gi·ªØ ch√¢n v√† tƒÉng tr∆∞·ªüng

### üîß **Gi√°m S√°t S·ª©c Kh·ªèe H·ªá Th·ªëng**
- B·∫£ng ƒëi·ªÅu khi·ªÉn hi·ªáu su·∫•t t·ªïng th·ªÉ
- Tr·∫°ng th√°i s·ª©c kh·ªèe th√†nh ph·∫ßn
- Khuy·∫øn ngh·ªã t·ªëi ∆∞u h√≥a

**H·ªèi t√¥i v·ªÅ b·∫•t k·ª≥ lƒ©nh v·ª±c n√†o ƒë·ªÉ c√≥ ph√¢n t√≠ch chi ti·∫øt v·ªõi d·ªØ li·ªáu th·ª±c t·ª´ h·ªá th·ªëng c·ªßa b·∫°n!**

*V√≠ d·ª•: "ph√¢n t√≠ch hi·ªáu su·∫•t m√¥ h√¨nh AI", "hi·ªÉn th·ªã ph√¢n t√≠ch m√°y ch·ªß", "b√°o c√°o t∆∞∆°ng t√°c ng∆∞·ªùi d√πng", "t·ªïng quan s·ª©c kh·ªèe h·ªá th·ªëng"*`;
    };

    const sendMessage = async () => {
        if (!inputMessage.trim() || loading) return;

        setLoading(true);
        const userMessage = inputMessage;
        setInputMessage("");

        // Add user message immediately
        const userMsgObj: SystemMessage = {
            id: Date.now().toString(),
            role: 'USER',
            content: userMessage,
            timestamp: new Date().toISOString()
        };
        setMessages(prev => [...prev, userMsgObj]);

        try {
            // Try API first
            const response = await fetch(`/api/system-master/chat/${sessionId}/messages`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    role: 'USER',
                    content: userMessage
                })
            });

            if (response.ok) {
                await fetchMessages();
            } else {
                throw new Error('API th·∫•t b·∫°i');
            }
        } catch (error) {
            console.error('L·ªói g·ª≠i tin nh·∫Øn:', error);

            // Fallback to comprehensive data response
            try {
                const mockResponse = await generateMockResponse(userMessage);
                const aiMsgObj: SystemMessage = {
                    id: (Date.now() + 1).toString(),
                    role: 'ASSISTANT',
                    content: mockResponse,
                    timestamp: new Date().toISOString()
                };
                setMessages(prev => [...prev, aiMsgObj]);
            } catch (mockError) {
                toast.error("Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi");
                setInputMessage(userMessage);
            }
        } finally {
            setLoading(false);
        }
    };

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    };

    const copyMessage = async (content: string, messageId: string) => {
        try {
            await navigator.clipboard.writeText(content);
            setCopiedId(messageId);
            toast.success("ƒê√£ sao ch√©p!");
            setTimeout(() => setCopiedId(null), 2000);
        } catch (error) {
            toast.error("Kh√¥ng th·ªÉ sao ch√©p");
        }
    };

    // Quick Commands - Ti·∫øng Vi·ªát
    const quickCommands = [
        {
            label: "S·ª©c Kh·ªèe H·ªá Th·ªëng",
            value: "hi·ªÉn th·ªã t·ªïng quan s·ª©c kh·ªèe v√† hi·ªáu su·∫•t h·ªá th·ªëng to√†n di·ªán",
            icon: Monitor,
            color: "bg-blue-500",
            description: "Ch·∫©n ƒëo√°n h·ªá th·ªëng ho√†n ch·ªânh"
        },
        {
            label: "Ph√¢n T√≠ch M√¥ H√¨nh AI",
            value: "ph√¢n t√≠ch t·∫•t c·∫£ m√¥ h√¨nh AI v·ªõi c√°c ch·ªâ s·ªë hi·ªáu su·∫•t chi ti·∫øt",
            icon: Brain,
            color: "bg-purple-500",
            description: "Hi·ªÉu bi·∫øt s√¢u v·ªÅ m√¥ h√¨nh AI"
        },
        {
            label: "Ph√¢n T√≠ch M√°y Ch·ªß",
            value: "ph√¢n t√≠ch hi·ªáu su·∫•t v√† s·ª≠ d·ª•ng m√°y ch·ªß to√†n di·ªán",
            icon: Database,
            color: "bg-green-500",
            description: "Hi·ªÉu bi·∫øt v·ªÅ c∆° s·ªü h·∫° t·∫ßng m√°y ch·ªß"
        },
        {
            label: "T∆∞∆°ng T√°c Ng∆∞·ªùi D√πng",
            value: "ph√¢n t√≠ch chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng v√† m√¥ h√¨nh t∆∞∆°ng t√°c",
            icon: Users,
            color: "bg-yellow-500",
            description: "Ph√¢n t√≠ch h√†nh vi ng∆∞·ªùi d√πng"
        },
        {
            label: "Ph√¢n T√≠ch Ch∆∞∆°ng Tr√¨nh",
            value: "ph√¢n t√≠ch t·∫•t c·∫£ lƒ©nh v·ª±c v√† m√¥n h·ªçc v·ªõi hi·ªÉu bi·∫øt v·ªÅ ƒë·ªô kh√≥",
            icon: FileText,
            color: "bg-indigo-500",
            description: "Ph√¢n t√≠ch n·ªôi dung gi√°o d·ª•c"
        },
        {
            label: "Xu H∆∞·ªõng Hi·ªáu Su·∫•t",
            value: "hi·ªÉn th·ªã xu h∆∞·ªõng hi·ªáu su·∫•t v√† d·ª± ƒëo√°n tr√™n t·∫•t c·∫£ c√°c ch·ªâ s·ªë",
            icon: TrendingUp,
            color: "bg-red-500",
            description: "Ph√¢n t√≠ch xu h∆∞·ªõng & d·ª± b√°o"
        },
        {
            label: "Hi·ªÉu Bi·∫øt D·ªØ Li·ªáu",
            value: "cung c·∫•p hi·ªÉu bi·∫øt d·ªØ li·ªáu to√†n di·ªán v√† khuy·∫øn ngh·ªã",
            icon: PieChart,
            color: "bg-orange-500",
            description: "Ph√¢n t√≠ch n√¢ng cao"
        },
        {
            label: "H∆∞·ªõng D·∫´n T·ªëi ∆Øu",
            value: "khuy·∫øn ngh·ªã t·ªëi ∆∞u h√≥a h·ªá th·ªëng d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i",
            icon: Target,
            color: "bg-pink-500",
            description: "T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t"
        }
    ];

    if (initialLoading) {
        return (
            <div className="flex items-center justify-center h-screen bg-gradient-to-br from-blue-50 to-purple-50">
                <div className="text-center space-y-6">
                    <div className="relative">
                        <div className="h-16 w-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mx-auto">
                            <Sparkles className="h-8 w-8 text-white animate-pulse" />
                        </div>
                        <div className="absolute inset-0 bg-blue-500/20 rounded-full animate-ping" />
                    </div>
                    <div>
                        <h3 className="text-xl font-semibold mb-2">ƒêang Kh·ªüi T·∫°o Qu·∫£n L√Ω H·ªá Th·ªëng</h3>
                        <p className="text-muted-foreground">ƒêang k·∫øt n·ªëi ƒë·∫øn √Ω th·ª©c AI...</p>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="h-screen overflow-hidden flex flex-col bg-gradient-to-br from-slate-50 to-blue-50/50">
            {/* Enhanced Header - Ti·∫øng Vi·ªát */}
            <div className="flex-shrink-0 border-b bg-white/80 backdrop-blur-md px-6 py-4 shadow-sm">
                <div className="flex items-center justify-between max-w-7xl mx-auto">
                    <div className="flex items-center gap-4">
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => router.push('/system-master')}
                            className="flex items-center gap-2 hover:bg-blue-50"
                        >
                            <ArrowLeft className="h-4 w-4" />
                            B·∫£ng ƒêi·ªÅu Khi·ªÉn
                        </Button>
                        <div className="flex items-center gap-3">
                            <div className="h-10 w-10 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center shadow-lg">
                                <Sparkles className="h-5 w-5 text-white" />
                            </div>
                            <div>
                                <h1 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                                    Tr·ª£ L√Ω AI Qu·∫£n L√Ω H·ªá Th·ªëng
                                </h1>
                                <p className="text-sm text-muted-foreground">ƒê√°nh Gi√° Tr·ª£ L√Ω AI N√¢ng Cao</p>
                            </div>
                        </div>
                    </div>
                    <div className="flex items-center gap-3">
                        <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 px-3 py-1">
                            <div className="h-2 w-2 bg-green-500 rounded-full mr-2 animate-pulse" />
                            Tr·ª±c Tuy·∫øn
                        </Badge>
                        <Badge variant="secondary" className="font-mono">{sessionId.slice(-8)}</Badge>
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
                            className="lg:hidden"
                        >
                            <ChevronDown className={cn("h-4 w-4 transition-transform", sidebarCollapsed && "rotate-180")} />
                        </Button>
                    </div>
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex max-w-7xl mx-auto w-full overflow-hidden">
                {/* Enhanced Sidebar - Ti·∫øng Vi·ªát */}
                <div className={cn(
                    "flex-shrink-0 border-r bg-white/50 backdrop-blur-sm transition-all duration-300",
                    sidebarCollapsed ? "w-0 overflow-hidden" : "w-80"
                )}>
                    <div className="h-full flex flex-col">
                        <div className="p-4 border-b bg-gradient-to-r from-blue-50 to-purple-50">
                            <h3 className="text-sm font-semibold flex items-center gap-2">
                                <Brain className="h-4 w-4 text-purple-600" />
                                L·ªánh Ph√¢n T√≠ch AI
                            </h3>
                            <p className="text-xs text-muted-foreground mt-1">Ph√¢n t√≠ch d·ªØ li·ªáu th·ªùi gian th·ª±c</p>
                        </div>
                        <ScrollArea className="flex-1 p-3">
                            <div className="space-y-2">
                                {quickCommands.map((cmd) => (
                                    <Button
                                        key={cmd.value}
                                        variant="ghost"
                                        size="sm"
                                        className="w-full justify-start h-auto p-3 hover:bg-white hover:shadow-sm transition-all"
                                        onClick={() => setInputMessage(cmd.value)}
                                        disabled={loading}
                                    >
                                        <div className={cn("h-8 w-8 rounded-lg flex items-center justify-center mr-3 shadow-sm", cmd.color)}>
                                            <cmd.icon className="h-4 w-4 text-white" />
                                        </div>
                                        <div className="text-left flex-1">
                                            <div className="font-medium text-sm">{cmd.label}</div>
                                            <div className="text-xs text-muted-foreground truncate">{cmd.description}</div>
                                        </div>
                                    </Button>
                                ))}

                                <Separator className="my-4" />

                                <div className="space-y-3">
                                    <div className="flex items-center gap-2">
                                        <Activity className="h-4 w-4 text-blue-600" />
                                        <span className="text-sm font-medium">Th√¥ng Tin Phi√™n</span>
                                    </div>
                                    <div className="space-y-2">
                                        <div className="flex justify-between items-center p-2 bg-blue-50 rounded-lg">
                                            <span className="text-xs text-gray-600">Tin nh·∫Øn:</span>
                                            <Badge variant="secondary" className="text-xs">{messages.length}</Badge>
                                        </div>
                                        <div className="flex justify-between items-center p-2 bg-green-50 rounded-lg">
                                            <span className="text-xs text-gray-600">Tr·∫°ng th√°i:</span>
                                            <Badge className="bg-green-500 hover:bg-green-600 text-xs">Ho·∫°t ƒë·ªông</Badge>
                                        </div>
                                        <div className="flex justify-between items-center p-2 bg-purple-50 rounded-lg">
                                            <span className="text-xs text-gray-600">Phi√™n:</span>
                                            <span className="text-xs font-mono text-purple-700">{sessionId.slice(-8)}</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </ScrollArea>
                    </div>
                </div>

                {/* Enhanced Chat Area - Ti·∫øng Vi·ªát */}
                <div className="flex-1 flex flex-col bg-white/70 backdrop-blur-sm overflow-hidden">
                    {/* Chat Header */}
                    <div className="flex-shrink-0 border-b bg-gradient-to-r from-blue-50/80 to-purple-50/80 backdrop-blur-sm px-6 py-4">
                        <div className="flex items-center justify-between">
                            <div className="flex items-center gap-3">
                                <Bot className="h-5 w-5 text-blue-600" />
                                <span className="font-semibold">Nh√† Ph√¢n T√≠ch H·ªá Th·ªëng AI</span>
                                <Badge variant="outline" className="text-xs bg-white/50">Ch·∫ø ƒë·ªô D·ªØ li·ªáu Th·ªùi gian Th·ª±c</Badge>
                            </div>
                            <div className="flex items-center gap-2">
                                <Badge variant="outline" className="text-xs">
                                    <Clock className="h-3 w-3 mr-1" />
                                    {new Date().toLocaleTimeString('vi-VN')}
                                </Badge>
                                <Button variant="ghost" size="sm">
                                    <Settings className="h-4 w-4" />
                                </Button>
                            </div>
                        </div>
                    </div>

                    {/* Messages Area */}
                    <div className="flex-1 overflow-hidden">
                        <ScrollArea className="h-full">
                            <div className="p-6 space-y-6">
                                {messages.length === 0 ? (
                                    <div className="text-center py-16">
                                        <div className="h-16 w-16 rounded-2xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center mx-auto mb-6 shadow-lg">
                                            <Brain className="h-8 w-8 text-white" />
                                        </div>
                                        <h3 className="text-2xl font-bold mb-3 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                                            Tr·ª£ L√Ω AI Qu·∫£n L√Ω H·ªá Th·ªëng
                                        </h3>
                                        <p className="text-muted-foreground mb-6 max-w-lg mx-auto leading-relaxed">
                                            T√¥i ph√¢n t√≠ch d·ªØ li·ªáu th·ªùi gian th·ª±c t·ª´ h·ªá th·ªëng LMS c·ªßa b·∫°n bao g·ªìm m√¥ h√¨nh AI, m√°y ch·ªß,
                                            t∆∞∆°ng t√°c ng∆∞·ªùi d√πng, ch·ªâ s·ªë hi·ªáu su·∫•t v√† cung c·∫•p hi·ªÉu bi·∫øt to√†n di·ªán v·ªõi khuy·∫øn ngh·ªã c√≥ th·ªÉ th·ª±c hi·ªán.
                                        </p>
                                        <div className="flex flex-wrap gap-3 justify-center">
                                            {quickCommands.slice(0, 4).map((cmd) => (
                                                <Button
                                                    key={cmd.value}
                                                    variant="outline"
                                                    size="sm"
                                                    onClick={() => setInputMessage(cmd.value)}
                                                    className="hover:bg-white hover:shadow-md transition-all"
                                                >
                                                    <cmd.icon className="h-4 w-4 mr-2" />
                                                    {cmd.label}
                                                </Button>
                                            ))}
                                        </div>
                                    </div>
                                ) : (
                                    messages.map((message) => (
                                        <div
                                            key={message.id}
                                            className={cn(
                                                "flex gap-4 group",
                                                message.role === 'USER' ? 'justify-end' : 'justify-start'
                                            )}
                                        >
                                            {message.role === 'ASSISTANT' && (
                                                <div className="h-9 w-9 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center flex-shrink-0 shadow-md">
                                                    <Brain className="h-5 w-5 text-white" />
                                                </div>
                                            )}

                                            <div
                                                className={cn(
                                                    "max-w-[85%] rounded-2xl px-4 py-3 relative shadow-sm",
                                                    message.role === 'USER'
                                                        ? 'bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-tr-lg'
                                                        : 'bg-white border border-gray-200 rounded-tl-lg'
                                                )}
                                            >
                                                {/* Message Header */}
                                                <div className="flex items-center gap-2 mb-2">
                                                    <span className={cn(
                                                        "text-xs font-semibold",
                                                        message.role === 'USER' ? 'text-blue-100' : 'text-gray-600'
                                                    )}>
                                                        {message.role === 'USER' ? 'B·∫°n' : 'Nh√† Ph√¢n T√≠ch H·ªá Th·ªëng'}
                                                    </span>
                                                    <span className={cn(
                                                        "text-xs",
                                                        message.role === 'USER' ? 'text-blue-200' : 'text-gray-400'
                                                    )}>
                                                        {new Date(message.timestamp).toLocaleTimeString('vi-VN')}
                                                    </span>
                                                </div>

                                                {/* Message Content */}
                                                <div className={cn(
                                                    "prose prose-sm max-w-none",
                                                    message.role === 'USER' ? 'prose-invert' : ''
                                                )}>
                                                    {message.role === 'USER' ? (
                                                        <div
                                                            className="text-sm leading-relaxed"
                                                            dangerouslySetInnerHTML={{
                                                                __html: message.content
                                                                    .replace(/`([^`]+)`/g, '<code class="bg-blue-600/50 text-blue-100 px-1.5 py-0.5 rounded-md text-xs font-mono">$1</code>')
                                                                    .replace(/\*\*(.*?)\*\*/g, '<strong class="font-semibold">$1</strong>')
                                                                    .replace(/\*(.*?)\*/g, '<em class="italic">$1</em>')
                                                                    .replace(/\n/g, '<br>')
                                                            }}
                                                        />
                                                    ) : (
                                                        <ReactMarkdown
                                                            remarkPlugins={[remarkGfm]}
                                                            components={MarkdownComponents}
                                                        >
                                                            {message.content}
                                                        </ReactMarkdown>
                                                    )}
                                                </div>

                                                {/* Copy Button */}
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    className={cn(
                                                        "absolute top-2 right-2 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity",
                                                        message.role === 'USER'
                                                            ? 'text-blue-200 hover:text-white hover:bg-blue-600/50'
                                                            : 'hover:bg-gray-100'
                                                    )}
                                                    onClick={() => copyMessage(message.content, message.id)}
                                                >
                                                    {copiedId === message.id ? (
                                                        <Check className="h-3 w-3" />
                                                    ) : (
                                                        <Copy className="h-3 w-3" />
                                                    )}
                                                </Button>
                                            </div>

                                            {message.role === 'USER' && (
                                                <div className="h-9 w-9 rounded-xl bg-gradient-to-r from-green-500 to-blue-500 flex items-center justify-center flex-shrink-0 shadow-md">
                                                    <User className="h-5 w-5 text-white" />
                                                </div>
                                            )}
                                        </div>
                                    ))
                                )}

                                {/* Enhanced Typing Indicator */}
                                {loading && (
                                    <div className="flex gap-4">
                                        <div className="h-9 w-9 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center shadow-md">
                                            <Brain className="h-5 w-5 text-white animate-pulse" />
                                        </div>
                                        <div className="bg-white border border-gray-200 rounded-2xl rounded-tl-lg px-4 py-3 shadow-sm">
                                            <div className="flex items-center gap-3">
                                                <div className="flex space-x-1">
                                                    <div className="h-2 w-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                                                    <div className="h-2 w-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                                                    <div className="h-2 w-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                                                </div>
                                                <span className="text-sm text-gray-500">ƒêang ph√¢n t√≠ch d·ªØ li·ªáu h·ªá th·ªëng...</span>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                <div ref={messagesEndRef} />
                            </div>
                        </ScrollArea>
                    </div>

                    {/* Enhanced Input Area */}
                    <div className="flex-shrink-0 border-t bg-white/80 backdrop-blur-md p-6">
                        <div className="flex gap-4">
                            <div className="flex-1 relative">
                                <Input
                                    value={inputMessage}
                                    onChange={(e) => setInputMessage(e.target.value)}
                                    onKeyPress={handleKeyPress}
                                    placeholder="H·ªèi v·ªÅ s·ª©c kh·ªèe h·ªá th·ªëng, m√¥ h√¨nh AI, ph√¢n t√≠ch ng∆∞·ªùi d√πng... (h·ªó tr·ª£ **ƒë·∫≠m** v√† `m√£`)"
                                    disabled={loading}
                                    className="pr-14 rounded-2xl border-gray-200 bg-white/50 backdrop-blur-sm h-12 text-sm"
                                />
                                {inputMessage && (
                                    <Button
                                        size="sm"
                                        className="absolute right-2 top-2 h-8 w-8 p-0 rounded-xl bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 shadow-sm"
                                        onClick={sendMessage}
                                        disabled={loading || !inputMessage.trim()}
                                    >
                                        {loading ? (
                                            <Loader2 className="h-4 w-4 animate-spin" />
                                        ) : (
                                            <Send className="h-4 w-4" />
                                        )}
                                    </Button>
                                )}
                            </div>
                        </div>
                        <div className="flex justify-between items-center mt-3 text-xs text-gray-500">
                            <div className="flex items-center gap-4">
                                <span className="flex items-center gap-1">
                                    <Sparkles className="h-3 w-3" />
                                    Ph√¢n t√≠ch d·ªØ li·ªáu th·ªùi gian th·ª±c
                                </span>
                                <span>Hi·ªÉu bi·∫øt h·ªá th·ªëng to√†n di·ªán</span>
                            </div>
                            <span className={cn(
                                "font-mono",
                                inputMessage.length > 1800 ? "text-red-500" : "text-gray-400"
                            )}>
                                {inputMessage.length}/2000
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}